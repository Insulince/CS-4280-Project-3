#include <map>
#include <iostream>
#include "scanner.h"

using namespace std;

const string SUPPORTED_ALPHABET = " abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789=<>!:+-*/&%.(){}[],;"; //# is omitted because they are filtered out of the original source.

const int FSA_TABLE_ROW_INDEX_END_OF_FILE = 0;
const int FSA_TABLE_ROW_INDEX_IDENTIFIER = 1;
const int FSA_TABLE_ROW_INDEX_INTEGER = 2;
const int FSA_TABLE_ROW_INDEX_OPERATOR_ASSIGN = 3;
const int FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN = 4;
const int FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN_OR_EQUAL_TO = 5;
const int FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN = 6;
const int FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 7;
const int FSA_TABLE_ROW_INDEX_ILLEGAL_OPERATOR_NOT = 8;
const int FSA_TABLE_ROW_INDEX_OPERATOR_NOT_EQUAL_TO = 9;
const int FSA_TABLE_ROW_INDEX_OPERATOR_EQUAL_TO = 10;
const int FSA_TABLE_ROW_INDEX_OPERATOR_COLON = 11;
const int FSA_TABLE_ROW_INDEX_OPERATOR_ADDITION = 12;
const int FSA_TABLE_ROW_INDEX_OPERATOR_SUBTRACTION = 13;
const int FSA_TABLE_ROW_INDEX_OPERATOR_MULTIPLICATION = 14;
const int FSA_TABLE_ROW_INDEX_OPERATOR_DIVISION = 15;
const int FSA_TABLE_ROW_INDEX_OPERATOR_AND = 16;
const int FSA_TABLE_ROW_INDEX_OPERATOR_MODULO = 17;
const int FSA_TABLE_ROW_INDEX_OPERATOR_CONCATENATION = 18;
const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_PARENTHESIS = 19;
const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_PARENTHESIS = 20;
const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_CURLY_BRACE = 21;
const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_CURLY_BRACE = 22;
const int FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_SQUARE_BRACKET = 23;
const int FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_SQUARE_BRACKET = 24;
const int FSA_TABLE_ROW_INDEX_DELIMITER_COMMA = 25;
const int FSA_TABLE_ROW_INDEX_DELIMITER_SEMICOLON = 26;

const map<const TOKEN_IDENTIFIER, const int> TOKEN_IDENTIFIER_TO_FSA_TABLE_ROW_INDEX_MAP = {
        {END_OF_FILE,                       FSA_TABLE_ROW_INDEX_END_OF_FILE},
        {IDENTIFIER,                        FSA_TABLE_ROW_INDEX_IDENTIFIER},
        {INTEGER,                           FSA_TABLE_ROW_INDEX_INTEGER},
        {OPERATOR_EQUALS,                   FSA_TABLE_ROW_INDEX_OPERATOR_ASSIGN},
        {OPERATOR_LESS_THAN,                FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN},
        {OPERATOR_LESS_THAN_OR_EQUAL_TO,    FSA_TABLE_ROW_INDEX_OPERATOR_LESS_THAN_OR_EQUAL_TO},
        {OPERATOR_GREATER_THAN,             FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN},
        {OPERATOR_GREATER_THAN_OR_EQUAL_TO, FSA_TABLE_ROW_INDEX_OPERATOR_GREATER_THAN_OR_EQUAL_TO},
        {ILLEGAL_EXCLAMATION_POINT,         FSA_TABLE_ROW_INDEX_ILLEGAL_OPERATOR_NOT},
        {OPERATOR_EXCLAMATION_POINT_EQUALS, FSA_TABLE_ROW_INDEX_OPERATOR_NOT_EQUAL_TO},
        {OPERATOR_DOUBLE_EQUALS,            FSA_TABLE_ROW_INDEX_OPERATOR_EQUAL_TO},
        {OPERATOR_COLON,                    FSA_TABLE_ROW_INDEX_OPERATOR_COLON},
        {OPERATOR_PLUS,                     FSA_TABLE_ROW_INDEX_OPERATOR_ADDITION},
        {OPERATOR_MINUS,                    FSA_TABLE_ROW_INDEX_OPERATOR_SUBTRACTION},
        {OPERATOR_ASTERISK,                 FSA_TABLE_ROW_INDEX_OPERATOR_MULTIPLICATION},
        {OPERATOR_FORWARD_SLASH,            FSA_TABLE_ROW_INDEX_OPERATOR_DIVISION},
        {OPERATOR_AMPERSAND,                FSA_TABLE_ROW_INDEX_OPERATOR_AND},
        {OPERATOR_PERCENT,                  FSA_TABLE_ROW_INDEX_OPERATOR_MODULO},
        {DELIMITER_PERIOD,                  FSA_TABLE_ROW_INDEX_OPERATOR_CONCATENATION},
        {DELIMITER_LEFT_PARENTHESIS,        FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_PARENTHESIS},
        {DELIMITER_RIGHT_PARENTHESIS,       FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_PARENTHESIS},
        {DELIMITER_LEFT_CURLY_BRACE,        FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_CURLY_BRACE},
        {DELIMITER_RIGHT_CURLY_BRACE,       FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_CURLY_BRACE},
        {DELIMITER_LEFT_SQUARE_BRACKET,     FSA_TABLE_ROW_INDEX_DELIMITER_LEFT_SQUARE_BRACKET},
        {DELIMITER_RIGHT_SQUARE_BRACKET,    FSA_TABLE_ROW_INDEX_DELIMITER_RIGHT_SQUARE_BRACKET},
        {DELIMITER_COMMA,                   FSA_TABLE_ROW_INDEX_DELIMITER_COMMA},
        {DELIMITER_SEMICOLON,               FSA_TABLE_ROW_INDEX_DELIMITER_SEMICOLON}
};

const int FSA_TABLE_COLUMN_INDEX_END_OF_FILE = 0;
const int FSA_TABLE_COLUMN_INDEX_WHITE_SPACE = 1;
const int FSA_TABLE_COLUMN_INDEX_LETTER = 2;
const int FSA_TABLE_COLUMN_INDEX_DECIMAL = 3;
const int FSA_TABLE_COLUMN_INDEX_EQUAL = 4;
const int FSA_TABLE_COLUMN_INDEX_LESS_THAN = 5;
const int FSA_TABLE_COLUMN_INDEX_GREATER_THAN = 6;
const int FSA_TABLE_COLUMN_INDEX_EXCLAMATION_POINT = 7;
const int FSA_TABLE_COLUMN_INDEX_COLON = 8;
const int FSA_TABLE_COLUMN_INDEX_PLUS = 9;
const int FSA_TABLE_COLUMN_INDEX_MINUS = 10;
const int FSA_TABLE_COLUMN_INDEX_ASTERISK = 11;
const int FSA_TABLE_COLUMN_INDEX_FORWARD_SLASH = 12;
const int FSA_TABLE_COLUMN_INDEX_AMPERSAND = 13;
const int FSA_TABLE_COLUMN_INDEX_PERCENT = 14;
const int FSA_TABLE_COLUMN_INDEX_PERIOD = 15;
const int FSA_TABLE_COLUMN_INDEX_LEFT_PARENTHESIS = 16;
const int FSA_TABLE_COLUMN_INDEX_RIGHT_PARENTHESIS = 17;
const int FSA_TABLE_COLUMN_INDEX_LEFT_CURLY_BRACE = 18;
const int FSA_TABLE_COLUMN_INDEX_RIGHT_CURLY_BRACE = 19;
const int FSA_TABLE_COLUMN_INDEX_LEFT_SQUARE_BRACKET = 20;
const int FSA_TABLE_COLUMN_INDEX_RIGHT_SQUARE_BRACKET = 21;
const int FSA_TABLE_COLUMN_INDEX_COMMA = 22;
const int FSA_TABLE_COLUMN_INDEX_SEMICOLON = 23;

const map<const char, const int> CHARACTER_TO_FSA_TABLE_COLUMN_INDEX_MAP = {
        {' ',  FSA_TABLE_COLUMN_INDEX_WHITE_SPACE},
        {'\n', FSA_TABLE_COLUMN_INDEX_WHITE_SPACE},
        {'a',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'b',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'c',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'d',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'e',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'f',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'g',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'h',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'i',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'j',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'k',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'l',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'m',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'n',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'o',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'p',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'q',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'r',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'s',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'t',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'u',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'v',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'w',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'x',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'y',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'z',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'A',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'B',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'C',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'D',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'E',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'F',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'G',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'H',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'I',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'J',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'K',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'L',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'M',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'N',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'O',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'P',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'Q',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'R',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'S',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'T',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'U',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'V',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'W',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'X',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'Y',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'Z',  FSA_TABLE_COLUMN_INDEX_LETTER},
        {'0',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'1',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'2',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'3',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'4',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'5',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'6',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'7',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'8',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'9',  FSA_TABLE_COLUMN_INDEX_DECIMAL},
        {'=',  FSA_TABLE_COLUMN_INDEX_EQUAL},
        {'<',  FSA_TABLE_COLUMN_INDEX_LESS_THAN},
        {'>',  FSA_TABLE_COLUMN_INDEX_GREATER_THAN},
        {'!',  FSA_TABLE_COLUMN_INDEX_EXCLAMATION_POINT},
        {':',  FSA_TABLE_COLUMN_INDEX_COLON},
        {'+',  FSA_TABLE_COLUMN_INDEX_PLUS},
        {'-',  FSA_TABLE_COLUMN_INDEX_MINUS},
        {'*',  FSA_TABLE_COLUMN_INDEX_ASTERISK},
        {'/',  FSA_TABLE_COLUMN_INDEX_FORWARD_SLASH},
        {'&',  FSA_TABLE_COLUMN_INDEX_AMPERSAND},
        {'%',  FSA_TABLE_COLUMN_INDEX_PERCENT},
        {'.',  FSA_TABLE_COLUMN_INDEX_PERIOD},
        {'(',  FSA_TABLE_COLUMN_INDEX_LEFT_PARENTHESIS},
        {')',  FSA_TABLE_COLUMN_INDEX_RIGHT_PARENTHESIS},
        {'{',  FSA_TABLE_COLUMN_INDEX_LEFT_CURLY_BRACE},
        {'}',  FSA_TABLE_COLUMN_INDEX_RIGHT_CURLY_BRACE},
        {'[',  FSA_TABLE_COLUMN_INDEX_LEFT_SQUARE_BRACKET},
        {']',  FSA_TABLE_COLUMN_INDEX_RIGHT_SQUARE_BRACKET},
        {',',  FSA_TABLE_COLUMN_INDEX_COMMA},
        {';',  FSA_TABLE_COLUMN_INDEX_SEMICOLON}
};

const int FINAL_STATE_END_OF_FILE = 100;
const int FINAL_STATE_IDENTIFIER = 101;
const int FINAL_STATE_INTEGER = 102;
const int FINAL_STATE_OPERATOR_EQUALS = 103;
const int FINAL_STATE_OPERATOR_LESS_THAN = 104;
const int FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO = 105;
const int FINAL_STATE_OPERATOR_GREATER_THAN = 106;
const int FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 107;
const int FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS = 109;
const int FINAL_STATE_OPERATOR_DOUBLE_EQUALS = 110;
const int FINAL_STATE_OPERATOR_COLON = 111;
const int FINAL_STATE_OPERATOR_PLUS = 112;
const int FINAL_STATE_OPERATOR_MINUS = 113;
const int FINAL_STATE_OPERATOR_ASTERISK = 114;
const int FINAL_STATE_OPERATOR_FORWARD_SLASH = 115;
const int FINAL_STATE_OPERATOR_AMPERSAND = 116;
const int FINAL_STATE_OPERATOR_PERCENT = 117;
const int FINAL_STATE_OPERATOR_PERIOD = 118;
const int FINAL_STATE_DELIMITER_LEFT_PARENTHESIS = 119;
const int FINAL_STATE_DELIMITER_RIGHT_PARENTHESIS = 120;
const int FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE = 121;
const int FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE = 122;
const int FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET = 123;
const int FINAL_STATE_DELIMITER_RIGHT_SQUARE_BRACKET = 124;
const int FINAL_STATE_DELIMITER_COMMA = 125;
const int FINAL_STATE_DELIMITER_SEMICOLON = 126;

const int INITIAL_STATE = 0;
const int INTERMEDIATE_STATE_IDENTIFIER = 1;
const int INTERMEDIATE_STATE_INTEGER = 2;
const int INTERMEDIATE_STATE_OPERATOR_EQUALS = 3;
const int INTERMEDIATE_STATE_OPERATOR_LESS_THAN = 4;
const int INTERMEDIATE_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO = 5;
const int INTERMEDIATE_STATE_OPERATOR_GREATER_THAN = 6;
const int INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO = 7;
const int INTERMEDIATE_STATE_POTENTIALLY_ILLEGAL_EXCLAMATION_POINT = 8;
const int INTERMEDIATE_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS = 9;
const int INTERMEDIATE_STATE_OPERATOR_DOUBLE_EQUAL = 10;
const int INTERMEDIATE_STATE_OPERATOR_COLON = 11;
const int INTERMEDIATE_STATE_OPERATOR_PLUS = 12;
const int INTERMEDIATE_STATE_OPERATOR_MINUS = 13;
const int INTERMEDIATE_STATE_OPERATOR_ASTERISK = 14;
const int INTERMEDIATE_STATE_OPERATOR_FORWARD_SLASH = 15;
const int INTERMEDIATE_STATE_OPERATOR_AMPERSAND = 16;
const int INTERMEDIATE_STATE_OPERATOR_PERCENT = 17;
const int INTERMEDIATE_STATE_OPERATOR_PERIOD = 18;
const int INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS = 19;
const int INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS = 20;
const int INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE = 21;
const int INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE = 22;
const int INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET = 23;
const int INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET = 24;
const int INTERMEDIATE_STATE_DELIMITER_COMMA = 25;
const int INTERMEDIATE_STATE_DELIMITER_SEMICOLON = 26;

const int ERROR_STATE_ILLEGAL_EXCLAMATION_POINT = -1;

const int FSA_TABLE[QUANTITY_TOKENS][QUANTITY_CHARACTER_CLASSES] = {
        {FINAL_STATE_END_OF_FILE,                       INITIAL_STATE,                                 INTERMEDIATE_STATE_IDENTIFIER,                 INTERMEDIATE_STATE_INTEGER,                    INTERMEDIATE_STATE_OPERATOR_EQUALS,                   INTERMEDIATE_STATE_OPERATOR_LESS_THAN,         INTERMEDIATE_STATE_OPERATOR_GREATER_THAN,      INTERMEDIATE_STATE_POTENTIALLY_ILLEGAL_EXCLAMATION_POINT, INTERMEDIATE_STATE_OPERATOR_COLON,             INTERMEDIATE_STATE_OPERATOR_PLUS,              INTERMEDIATE_STATE_OPERATOR_MINUS,             INTERMEDIATE_STATE_OPERATOR_ASTERISK,          INTERMEDIATE_STATE_OPERATOR_FORWARD_SLASH,     INTERMEDIATE_STATE_OPERATOR_AMPERSAND,         INTERMEDIATE_STATE_OPERATOR_PERCENT,           INTERMEDIATE_STATE_OPERATOR_PERIOD,            INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS, INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS, INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE, INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE, INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET,       INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET, INTERMEDIATE_STATE_DELIMITER_COMMA, INTERMEDIATE_STATE_DELIMITER_SEMICOLON},
        {FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        INTERMEDIATE_STATE_IDENTIFIER,                 INTERMEDIATE_STATE_IDENTIFIER,                 FINAL_STATE_IDENTIFIER,                               FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                                   FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER,                         FINAL_STATE_IDENTIFIER,                        FINAL_STATE_IDENTIFIER, FINAL_STATE_IDENTIFIER, FINAL_STATE_IDENTIFIER},
        {FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           INTERMEDIATE_STATE_INTEGER,                    FINAL_STATE_INTEGER,                                  FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                                      FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER,                            FINAL_STATE_INTEGER,                           FINAL_STATE_INTEGER, FINAL_STATE_INTEGER, FINAL_STATE_INTEGER},
        {FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   INTERMEDIATE_STATE_OPERATOR_DOUBLE_EQUAL,             FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                              FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                    FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS,                    FINAL_STATE_OPERATOR_EQUALS,                   FINAL_STATE_OPERATOR_EQUALS, FINAL_STATE_OPERATOR_EQUALS, FINAL_STATE_OPERATOR_EQUALS},
        {},
        {FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,           FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,               FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,     FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,    FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO},
        {FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,                        FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN,              FINAL_STATE_OPERATOR_GREATER_THAN,             FINAL_STATE_OPERATOR_GREATER_THAN, FINAL_STATE_OPERATOR_GREATER_THAN, FINAL_STATE_OPERATOR_GREATER_THAN},
        {FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,        FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,            FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,  FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO, FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO},
        {ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         INTERMEDIATE_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,                    ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,          ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,          ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,         ERROR_STATE_ILLEGAL_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_EXCLAMATION_POINT, ERROR_STATE_ILLEGAL_EXCLAMATION_POINT},
        {FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,        FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,            FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,  FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,  FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS, FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS},
        {},
        {FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                           FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                               FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON,                     FINAL_STATE_OPERATOR_COLON,                    FINAL_STATE_OPERATOR_COLON, FINAL_STATE_OPERATOR_COLON, FINAL_STATE_OPERATOR_COLON},
        {},
        {FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                           FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                               FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                     FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS,                     FINAL_STATE_OPERATOR_MINUS,                    FINAL_STATE_OPERATOR_MINUS, FINAL_STATE_OPERATOR_MINUS, FINAL_STATE_OPERATOR_MINUS},
        {},
        {},
        {},
        {},
        {FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                          FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                              FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                    FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD,                    FINAL_STATE_OPERATOR_PERIOD,                   FINAL_STATE_OPERATOR_PERIOD, FINAL_STATE_OPERATOR_PERIOD, FINAL_STATE_OPERATOR_PERIOD},
        {},
        {},
        {FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,               FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,                   FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,         FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,         FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,        FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE, FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE, FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE},
        {FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,              FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,                  FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,        FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,        FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,       FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE, FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE, FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE},
        {FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,            FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,                FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,      FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,     FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET, FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET, FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET},
        {},
        {},
        {}
};

const map<const int, const TOKEN_IDENTIFIER> STATE_TO_TOKEN_IDENTIFIER_MAP = {
        {FINAL_STATE_END_OF_FILE,                                  END_OF_FILE},
        {FINAL_STATE_IDENTIFIER,                                   IDENTIFIER},
        {FINAL_STATE_INTEGER,                                      INTEGER},
        {FINAL_STATE_OPERATOR_EQUALS,                              OPERATOR_EQUALS},
        {FINAL_STATE_OPERATOR_LESS_THAN,                           OPERATOR_LESS_THAN},
        {FINAL_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,               OPERATOR_LESS_THAN_OR_EQUAL_TO},
        {FINAL_STATE_OPERATOR_GREATER_THAN,                        OPERATOR_GREATER_THAN},
        {FINAL_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,            OPERATOR_GREATER_THAN_OR_EQUAL_TO},
        {FINAL_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,            OPERATOR_EXCLAMATION_POINT_EQUALS},
        {FINAL_STATE_OPERATOR_DOUBLE_EQUALS,                       OPERATOR_DOUBLE_EQUALS},
        {FINAL_STATE_OPERATOR_COLON,                               OPERATOR_COLON},
        {FINAL_STATE_OPERATOR_PLUS,                                OPERATOR_PLUS},
        {FINAL_STATE_OPERATOR_MINUS,                               OPERATOR_MINUS},
        {FINAL_STATE_OPERATOR_ASTERISK,                            OPERATOR_ASTERISK},
        {FINAL_STATE_OPERATOR_FORWARD_SLASH,                       OPERATOR_FORWARD_SLASH},
        {FINAL_STATE_OPERATOR_AMPERSAND,                           OPERATOR_AMPERSAND},
        {FINAL_STATE_OPERATOR_PERCENT,                             OPERATOR_PERCENT},
        {FINAL_STATE_OPERATOR_PERIOD,                              DELIMITER_PERIOD},
        {FINAL_STATE_DELIMITER_LEFT_PARENTHESIS,                   DELIMITER_LEFT_PARENTHESIS},
        {FINAL_STATE_DELIMITER_RIGHT_PARENTHESIS,                  DELIMITER_RIGHT_PARENTHESIS},
        {FINAL_STATE_DELIMITER_LEFT_CURLY_BRACE,                   DELIMITER_LEFT_CURLY_BRACE},
        {FINAL_STATE_DELIMITER_RIGHT_CURLY_BRACE,                  DELIMITER_RIGHT_CURLY_BRACE},
        {FINAL_STATE_DELIMITER_LEFT_SQUARE_BRACKET,                DELIMITER_LEFT_SQUARE_BRACKET},
        {FINAL_STATE_DELIMITER_RIGHT_SQUARE_BRACKET,               DELIMITER_RIGHT_SQUARE_BRACKET},
        {FINAL_STATE_DELIMITER_COMMA,                              DELIMITER_COMMA},
        {FINAL_STATE_DELIMITER_SEMICOLON,                          DELIMITER_SEMICOLON},
        {INITIAL_STATE,                                            END_OF_FILE},
        {INTERMEDIATE_STATE_IDENTIFIER,                            IDENTIFIER},
        {INTERMEDIATE_STATE_INTEGER,                               INTEGER},
        {INTERMEDIATE_STATE_OPERATOR_EQUALS,                       OPERATOR_EQUALS},
        {INTERMEDIATE_STATE_OPERATOR_LESS_THAN,                    OPERATOR_LESS_THAN},
        {INTERMEDIATE_STATE_OPERATOR_LESS_THAN_OR_EQUAL_TO,        OPERATOR_LESS_THAN_OR_EQUAL_TO},
        {INTERMEDIATE_STATE_OPERATOR_GREATER_THAN,                 OPERATOR_GREATER_THAN},
        {INTERMEDIATE_STATE_OPERATOR_GREATER_THAN_OR_EQUAL_TO,     OPERATOR_GREATER_THAN_OR_EQUAL_TO},
        {INTERMEDIATE_STATE_POTENTIALLY_ILLEGAL_EXCLAMATION_POINT, ILLEGAL_EXCLAMATION_POINT},
        {INTERMEDIATE_STATE_OPERATOR_EXCLAMATION_POINT_EQUALS,     OPERATOR_EXCLAMATION_POINT_EQUALS},
        {INTERMEDIATE_STATE_OPERATOR_DOUBLE_EQUAL,                 OPERATOR_DOUBLE_EQUALS},
        {INTERMEDIATE_STATE_OPERATOR_COLON,                        OPERATOR_COLON},
        {INTERMEDIATE_STATE_OPERATOR_PLUS,                         OPERATOR_PLUS},
        {INTERMEDIATE_STATE_OPERATOR_MINUS,                        OPERATOR_MINUS},
        {INTERMEDIATE_STATE_OPERATOR_ASTERISK,                     OPERATOR_ASTERISK},
        {INTERMEDIATE_STATE_OPERATOR_FORWARD_SLASH,                OPERATOR_FORWARD_SLASH},
        {INTERMEDIATE_STATE_OPERATOR_AMPERSAND,                    OPERATOR_AMPERSAND},
        {INTERMEDIATE_STATE_OPERATOR_PERCENT,                      OPERATOR_PERCENT},
        {INTERMEDIATE_STATE_OPERATOR_PERIOD,                       DELIMITER_PERIOD},
        {INTERMEDIATE_STATE_DELIMITER_LEFT_PARENTHESIS,            DELIMITER_LEFT_PARENTHESIS},
        {INTERMEDIATE_STATE_DELIMITER_RIGHT_PARENTHESIS,           DELIMITER_RIGHT_PARENTHESIS},
        {INTERMEDIATE_STATE_DELIMITER_LEFT_CURLY_BRACE,            DELIMITER_LEFT_CURLY_BRACE},
        {INTERMEDIATE_STATE_DELIMITER_RIGHT_CURLY_BRACE,           DELIMITER_RIGHT_CURLY_BRACE},
        {INTERMEDIATE_STATE_DELIMITER_LEFT_SQUARE_BRACKET,         DELIMITER_LEFT_SQUARE_BRACKET},
        {INTERMEDIATE_STATE_DELIMITER_RIGHT_SQUARE_BRACKET,        DELIMITER_RIGHT_SQUARE_BRACKET},
        {INTERMEDIATE_STATE_DELIMITER_COMMA,                       DELIMITER_COMMA},
        {INTERMEDIATE_STATE_DELIMITER_SEMICOLON,                   DELIMITER_SEMICOLON},
        {ERROR_STATE_ILLEGAL_EXCLAMATION_POINT,                    ILLEGAL_EXCLAMATION_POINT}
};

Scanner::Scanner(const string rawDataa) {
    rawData = rawDataa;
    currentIndex = 0;
    currentLineNumber = 1 + newLinesBeforeNextToken();
    commentMode = false;
};

Scanner::~Scanner() = default;

const string &Scanner::getRawData() const {
    return rawData;
}

int Scanner::getCurrentIndex() const {
    return currentIndex;
}

void Scanner::setCurrentIndex(int currentIndex) {
    Scanner::currentIndex = currentIndex;
}

int Scanner::getCurrentLineNumber() const {
    return currentLineNumber;
}

void Scanner::setCurrentLineNumber(int currentLineNumber) {
    Scanner::currentLineNumber = currentLineNumber;
}

bool Scanner::isCommentMode() const {
    return commentMode;
}

void Scanner::setCommentMode(bool commentMode) {
    Scanner::commentMode = commentMode;
}

Token *Scanner::getNextToken() {
    int state = INITIAL_STATE;
    TOKEN_IDENTIFIER candidateToken = END_OF_FILE;
    string value;

    bool stateIsNotFinal = true;

    while (stateIsNotFinal) {

        char nextChar = rawData[currentIndex];

        if (nextChar && nextChar != '#') {
            try {
                //The new state is the row corresponding to the current candidate token, and the new column is the column corresponding to the next character.
                state = FSA_TABLE[TOKEN_IDENTIFIER_TO_FSA_TABLE_ROW_INDEX_MAP.at(candidateToken)][CHARACTER_TO_FSA_TABLE_COLUMN_INDEX_MAP.at(nextChar)];

                //The current candidate token is the token represented by the current state.
                candidateToken = STATE_TO_TOKEN_IDENTIFIER_MAP.at(state);
            } catch (std::out_of_range &exception) {
                cerr << string("Scanner Error: Character not in alphabet, \"") + nextChar + "\", on line \"" + to_string(currentLineNumber) + "\".\n";
                exit(-1);
            }
        } else {
            state = FINAL_STATE_END_OF_FILE;
        }

        if (state >= INITIAL_STATE) {
            if (state < FINAL_STATE_END_OF_FILE) {

                value += nextChar;

                currentIndex++;
            } else {
                stateIsNotFinal = false;
            }
        } else {
            cerr << string("Scanner Error: Invalid token, \"" + TOKEN_IDENTIFIER_TO_TOKEN_NAME_MAP.at(candidateToken) + "\",  on line \"" + to_string(currentLineNumber) + "\".\n");
            exit(-1);
        }
    }

    //If the calculated token is an "identifier" make sure that it isn't a keyword, or proceed accordingly if it is.
    if (candidateToken == IDENTIFIER) {
        const string &trimmedValue = trim(value);

        if (KEYWORD_LITERAL_TO_KEYWORD_TOKEN_IDENTIFIER_MAP.find(trimmedValue) != KEYWORD_LITERAL_TO_KEYWORD_TOKEN_IDENTIFIER_MAP.end()) {
            candidateToken = KEYWORD_LITERAL_TO_KEYWORD_TOKEN_IDENTIFIER_MAP.at(trimmedValue);
        }
    }

    Token *token = new Token(candidateToken, value, to_string(currentLineNumber));

    currentLineNumber += newLinesBeforeNextToken();

    return token;
}

const int Scanner::newLinesBeforeNextToken() {
    int newLinesBeforeNextToken = 0;

    while (currentIndex < rawData.length() && nextCharacterIsNotTokenCharacter(rawData[currentIndex])) {
        if (rawData[currentIndex] == '#') {
            setCommentMode(!isCommentMode());
        }

        if (rawData[currentIndex] == '\n') {
            newLinesBeforeNextToken++;
        }

        currentIndex++;
    }

    return newLinesBeforeNextToken;
}

const bool Scanner::nextCharacterIsNotTokenCharacter(const char nextChar) const {
    if (isCommentMode()) {
        return true;
    } else {
        return nextChar == ' ' || nextChar == '\n' || nextChar == '#';
    }
}